(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function () {
	  main();
	};

	__webpack_require__(1);

	var _colors = __webpack_require__(2);

	var _colors2 = _interopRequireDefault(_colors);

	var _lodash = __webpack_require__(3);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _splitFile = __webpack_require__(4);

	var _splitFile2 = _interopRequireDefault(_splitFile);

	var _delete = __webpack_require__(5);

	var _delete2 = _interopRequireDefault(_delete);

	var _nowClient = __webpack_require__(6);

	var _nowClient2 = _interopRequireDefault(_nowClient);

	var _spinner = __webpack_require__(7);

	var _spinner2 = _interopRequireDefault(_spinner);

	var _command = __webpack_require__(14);

	var _command2 = _interopRequireDefault(_command);

	var _logger = __webpack_require__(13);

	var _logger2 = _interopRequireDefault(_logger);

	var _dockerfile = __webpack_require__(16);

	var _utils = __webpack_require__(10);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } // required for async/await to work


	var meteorSettingsVar = void 0;

	var buildMeteorApp = function () {
	  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
	    var message, buildCommand;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            message = 'building meteor app';

	            _spinner2.default.start(message + ' (this can take several minutes)');
	            buildCommand = new _command2.default('meteor build .meteor/local/builds ' + _dockerfile.dockerfile.serverOnly + ' --architecture=os.linux.x86_64');
	            _context.next = 5;
	            return buildCommand.run();

	          case 5:
	            _spinner2.default.succeed(message);

	          case 6:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined);
	  }));

	  return function buildMeteorApp() {
	    return _ref.apply(this, arguments);
	  };
	}();

	var createDockerfile = function () {
	  var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
	    var dockerfileContents;
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            dockerfileContents = _dockerfile.dockerfile.getContents((0, _utils.didPassParam)('MONGO_URL'));

	            (0, _logger2.default)('creating Dockerfile');
	            _context2.next = 4;
	            return (0, _utils.writeFile)('.meteor/local/builds/Dockerfile', dockerfileContents);

	          case 4:
	          case 'end':
	            return _context2.stop();
	        }
	      }
	    }, _callee2, undefined);
	  }));

	  return function createDockerfile() {
	    return _ref2.apply(this, arguments);
	  };
	}();

	var createSupervisorFile = function () {
	  var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
	    return regeneratorRuntime.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            (0, _logger2.default)('creating supervisor');
	            _context3.next = 3;
	            return (0, _utils.writeFile)('.meteor/local/builds/supervisord.conf', _dockerfile.dockerfile.getSupervisor());

	          case 3:
	          case 'end':
	            return _context3.stop();
	        }
	      }
	    }, _callee3, undefined);
	  }));

	  return function createSupervisorFile() {
	    return _ref3.apply(this, arguments);
	  };
	}();

	var splitBuild = function () {
	  var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
	    return regeneratorRuntime.wrap(function _callee5$(_context5) {
	      while (1) {
	        switch (_context5.prev = _context5.next) {
	          case 0:
	            (0, _logger2.default)('splitting bundle');
	            _context5.next = 3;
	            return new Promise(function (resolve, reject) {
	              _splitFile2.default.splitFileBySize('.meteor/local/builds/' + _dockerfile.dockerfile.buildzip, 999999, function () {
	                var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(err, names) {
	                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
	                    while (1) {
	                      switch (_context4.prev = _context4.next) {
	                        case 0:
	                          if (err) {
	                            reject(err);
	                          }
	                          // delete original bundle file so that it doesnt get uploaded to now
	                          _context4.next = 3;
	                          return _delete2.default.promise(['.meteor/local/builds/' + _dockerfile.dockerfile.buildzip]);

	                        case 3:
	                          resolve(names);

	                        case 4:
	                        case 'end':
	                          return _context4.stop();
	                      }
	                    }
	                  }, _callee4, undefined);
	                }));

	                return function (_x, _x2) {
	                  return _ref5.apply(this, arguments);
	                };
	              }());
	            });

	          case 3:
	          case 'end':
	            return _context5.stop();
	        }
	      }
	    }, _callee5, undefined);
	  }));

	  return function splitBuild() {
	    return _ref4.apply(this, arguments);
	  };
	}();

	var handleMeteorSettings = function () {
	  var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {
	    var env, settingsFile, settingsString;
	    return regeneratorRuntime.wrap(function _callee6$(_context6) {
	      while (1) {
	        switch (_context6.prev = _context6.next) {
	          case 0:
	            if ((0, _utils.didPassParam)('METEOR_SETTINGS')) {
	              _context6.next = 17;
	              break;
	            }

	            env = (0, _utils.getNodeEnv)();
	            settingsFile = env + '.settings.json';

	            (0, _logger2.default)('looking for meteor settings file ' + settingsFile + ' in root of project');
	            _context6.next = 6;
	            return (0, _utils.readFile)(settingsFile);

	          case 6:
	            settingsString = _context6.sent;

	            if (!settingsString) {
	              _context6.next = 16;
	              break;
	            }

	            if ((0, _utils.isStringJson)(settingsString)) {
	              _context6.next = 12;
	              break;
	            }

	            throw new Error('ERROR: ' + settingsFile + ' file is not valid JSON');

	          case 12:
	            meteorSettingsVar = settingsString.replace(/[\n ]/g, '');
	            (0, _logger2.default)('found settings file');

	          case 14:
	            _context6.next = 17;
	            break;

	          case 16:
	            (0, _logger2.default)('no settings file found');

	          case 17:
	          case 'end':
	            return _context6.stop();
	        }
	      }
	    }, _callee6, undefined);
	  }));

	  return function handleMeteorSettings() {
	    return _ref6.apply(this, arguments);
	  };
	}();

	var deployMeteorApp = function () {
	  var _ref7 = _asyncToGenerator(regeneratorRuntime.mark(function _callee7() {
	    var message, mongoUrl, args, meteorSettingsArg, rootUrl, deployCommand;
	    return regeneratorRuntime.wrap(function _callee7$(_context7) {
	      while (1) {
	        switch (_context7.prev = _context7.next) {
	          case 0:
	            message = 'deploying build';
	            mongoUrl = '';

	            if (!(0, _utils.didPassParam)('MONGO_URL')) {
	              console.log(_colors2.default.yellow('WARNING: Did not pass a MONGO_URL. Bundling a NON-PRODUCTION version of MongoDB with your application. Read about the limitations here: https://git.io/vM72E')); // eslint-disable-line no-console
	              mongoUrl = '-e MONGO_URL=mongodb://127.0.0.1:27017';
	            }
	            _spinner2.default.start(message + ' (this can take several minutes)');
	            args = process.argv.slice(2).join(' ');
	            meteorSettingsArg = meteorSettingsVar ? '-e METEOR_SETTINGS=\'' + meteorSettingsVar + '\'' : '';
	            rootUrl = !(0, _utils.didPassParam)('ROOT_URL') ? '-e ROOT_URL=http://localhost.com' : '';
	            deployCommand = new _command2.default('cd .meteor/local/builds && now -e PORT=3000 ' + mongoUrl + ' ' + rootUrl + ' ' + args + ' ' + meteorSettingsArg);
	            _context7.next = 10;
	            return deployCommand.run();

	          case 10:
	            _spinner2.default.succeed(message);

	          case 11:
	          case 'end':
	            return _context7.stop();
	        }
	      }
	    }, _callee7, undefined);
	  }));

	  return function deployMeteorApp() {
	    return _ref7.apply(this, arguments);
	  };
	}();

	var getDeploymentUrl = function () {
	  var _ref8 = _asyncToGenerator(regeneratorRuntime.mark(function _callee8() {
	    var now, deployments, sortedDeployments;
	    return regeneratorRuntime.wrap(function _callee8$(_context8) {
	      while (1) {
	        switch (_context8.prev = _context8.next) {
	          case 0:
	            (0, _logger2.default)('getting deployment url...');
	            now = (0, _nowClient2.default)();
	            deployments = void 0;
	            _context8.prev = 3;
	            _context8.next = 6;
	            return now.getDeployments();

	          case 6:
	            deployments = _context8.sent;
	            _context8.next = 12;
	            break;

	          case 9:
	            _context8.prev = 9;
	            _context8.t0 = _context8['catch'](3);

	            console.error(_context8.t0); // eslint-disable-line no-console

	          case 12:
	            // get latest deployment url from the list
	            sortedDeployments = _lodash2.default.sortBy(deployments, 'created');
	            return _context8.abrupt('return', sortedDeployments[sortedDeployments.length - 1]);

	          case 14:
	          case 'end':
	            return _context8.stop();
	        }
	      }
	    }, _callee8, undefined, [[3, 9]]);
	  }));

	  return function getDeploymentUrl() {
	    return _ref8.apply(this, arguments);
	  };
	}();

	var cleanup = function () {
	  var _ref9 = _asyncToGenerator(regeneratorRuntime.mark(function _callee9() {
	    return regeneratorRuntime.wrap(function _callee9$(_context9) {
	      while (1) {
	        switch (_context9.prev = _context9.next) {
	          case 0:
	            (0, _logger2.default)('cleaning up');
	            _context9.next = 3;
	            return _delete2.default.promise(['.meteor/local/builds/*']);

	          case 3:
	          case 'end':
	            return _context9.stop();
	        }
	      }
	    }, _callee9, undefined);
	  }));

	  return function cleanup() {
	    return _ref9.apply(this, arguments);
	  };
	}();

	var prepareForUpload = function () {
	  var _ref10 = _asyncToGenerator(regeneratorRuntime.mark(function _callee10() {
	    return regeneratorRuntime.wrap(function _callee10$(_context10) {
	      while (1) {
	        switch (_context10.prev = _context10.next) {
	          case 0:
	            _spinner2.default.start('preparing build');
	            _context10.next = 3;
	            return createDockerfile();

	          case 3:
	            if ((0, _utils.didPassParam)('MONGO_URL')) {
	              _context10.next = 6;
	              break;
	            }

	            _context10.next = 6;
	            return createSupervisorFile();

	          case 6:
	            _context10.next = 8;
	            return splitBuild();

	          case 8:
	            _context10.next = 10;
	            return handleMeteorSettings();

	          case 10:
	            _spinner2.default.succeed();

	          case 11:
	          case 'end':
	            return _context10.stop();
	        }
	      }
	    }, _callee10, undefined);
	  }));

	  return function prepareForUpload() {
	    return _ref10.apply(this, arguments);
	  };
	}();

	var main = function () {
	  var _ref11 = _asyncToGenerator(regeneratorRuntime.mark(function _callee11() {
	    var deployment;
	    return regeneratorRuntime.wrap(function _callee11$(_context11) {
	      while (1) {
	        switch (_context11.prev = _context11.next) {
	          case 0:
	            _context11.prev = 0;
	            _context11.next = 3;
	            return buildMeteorApp();

	          case 3:
	            _context11.next = 5;
	            return prepareForUpload();

	          case 5:
	            _context11.next = 7;
	            return deployMeteorApp();

	          case 7:
	            _context11.next = 9;
	            return getDeploymentUrl();

	          case 9:
	            deployment = _context11.sent;
	            _context11.next = 12;
	            return cleanup();

	          case 12:
	            _spinner2.default.succeed('meteor app deployed to ' + deployment.url);
	            _context11.next = 20;
	            break;

	          case 15:
	            _context11.prev = 15;
	            _context11.t0 = _context11['catch'](0);

	            _spinner2.default.fail();
	            console.error(_context11.t0); // eslint-disable-line no-console
	            // exit node process with error
	            process.exit(1);

	          case 20:
	          case 'end':
	            return _context11.stop();
	        }
	      }
	    }, _callee11, undefined, [[0, 15]]);
	  }));

	  return function main() {
	    return _ref11.apply(this, arguments);
	  };
	}();

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = require("babel-polyfill");

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = require("colors");

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("lodash");

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = require("split-file");

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = require("delete");

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = require("now-client");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _ora = __webpack_require__(8);

	var _ora2 = _interopRequireDefault(_ora);

	var _cliSpinners = __webpack_require__(9);

	var _cliSpinners2 = _interopRequireDefault(_cliSpinners);

	var _utils = __webpack_require__(10);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var prefix = '[METEOR-NOW]';

	var Spinner = function () {
	  function Spinner() {
	    _classCallCheck(this, Spinner);

	    this.spinner = (0, _ora2.default)({
	      spinner: _cliSpinners2.default.dots12
	    });
	  }

	  _createClass(Spinner, [{
	    key: 'start',
	    value: function start() {
	      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

	      if (!(0, _utils.isDebug)()) {
	        this.runAction('start', message);
	      }
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

	      if (!(0, _utils.isDebug)()) {
	        this.runAction('stop', message);
	      }
	    }
	  }, {
	    key: 'stopAndPersist',
	    value: function stopAndPersist() {
	      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

	      if (!(0, _utils.isDebug)()) {
	        this.runAction('stopAndPersist', message);
	      }
	    }
	  }, {
	    key: 'succeed',
	    value: function succeed() {
	      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

	      if (!(0, _utils.isDebug)()) {
	        this.runAction('succeed', message);
	      }
	    }
	  }, {
	    key: 'fail',
	    value: function fail() {
	      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

	      if (!(0, _utils.isDebug)()) {
	        this.runAction('fail', message);
	      }
	    }
	  }, {
	    key: 'runAction',
	    value: function runAction(action, message) {
	      if (message) {
	        this.setMessage(message);
	      }
	      this.spinner[action]();
	    }
	  }, {
	    key: 'setMessage',
	    value: function setMessage(message) {
	      this.spinner.text = prefix + ' - ' + message;
	    }
	  }]);

	  return Spinner;
	}();

	var spinner = new Spinner();

	exports.default = spinner;

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = require("ora");

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = require("cli-spinners");

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getDependencies = exports.getBuildName = exports.isDebug = exports.getArgs = exports.didPassParam = exports.getNodeEnv = exports.writeFile = exports.readFile = exports.isStringJson = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _fs = __webpack_require__(11);

	var _fs2 = _interopRequireDefault(_fs);

	var _minimist = __webpack_require__(12);

	var _minimist2 = _interopRequireDefault(_minimist);

	var _logger = __webpack_require__(13);

	var _logger2 = _interopRequireDefault(_logger);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	var isStringJson = function isStringJson(string) {
	  try {
	    JSON.parse(string);
	  } catch (e) {
	    return false;
	  }
	  return true;
	};

	var readFile = function () {
	  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(path) {
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            return _context.abrupt('return', new Promise(function (resolve) {
	              _fs2.default.readFile(path, { encoding: 'utf8' }, function (err, data) {
	                if (err) {
	                  (0, _logger2.default)('could not read ' + path);
	                  resolve(null);
	                } else {
	                  resolve(data);
	                }
	              });
	            }));

	          case 1:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined);
	  }));

	  return function readFile(_x) {
	    return _ref.apply(this, arguments);
	  };
	}();

	var writeFile = function () {
	  var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(path, contents) {
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            return _context2.abrupt('return', new Promise(function (resolve, reject) {
	              _fs2.default.writeFile(path, contents, function (err) {
	                if (err) {
	                  reject(err);
	                }
	                resolve();
	              });
	            }));

	          case 1:
	          case 'end':
	            return _context2.stop();
	        }
	      }
	    }, _callee2, undefined);
	  }));

	  return function writeFile(_x2, _x3) {
	    return _ref2.apply(this, arguments);
	  };
	}();

	// Converts passed arguments into an object such that
	// -e KEY=VALUE -e KEY=VAlUE --> {e: [[KEY, VALUE], [KEY, VALUE]]}
	var getArgs = function getArgs() {
	  var args = (0, _minimist2.default)(process.argv.slice(2));

	  if (!args.e) {
	    // no -e flag was passed
	    return args;
	  }

	  // handle -e arguments. minimist returns a string to args.e if single flag is passed
	  // and array if multiple are passed. This handles it so that getArgs() always returns
	  // array for args.e regardless if one or more environment variables were passed
	  var parsedEnvironmentArguments = [];

	  var splitEnvironmentArgument = function splitEnvironmentArgument(arg) {
	    return arg.split('=');
	  };

	  if (args.e instanceof Array) {
	    parsedEnvironmentArguments = args.e.map(function (arg) {
	      return splitEnvironmentArgument(arg);
	    });
	  } else {
	    parsedEnvironmentArguments = [splitEnvironmentArgument(args.e)];
	  }
	  return _extends({}, args, {
	    e: parsedEnvironmentArguments
	  });
	};

	var getParam = function getParam(param) {
	  var eArgs = getArgs().e || [];
	  var paramObject = eArgs.find(function (arg) {
	    return arg[0] === param;
	  });
	  return paramObject && paramObject[1];
	};

	var didPassParam = function didPassParam(param) {
	  var eArgs = getArgs().e || [];
	  return !!eArgs.find(function (arg) {
	    return arg[0] === param;
	  });
	};

	var getNodeEnv = function getNodeEnv() {
	  return getParam('NODE_ENV') || 'development';
	};

	var isDebug = function isDebug() {
	  return getArgs().d === true;
	};

	var getBuildName = function getBuildName() {
	  var pwd = process.env.PWD;
	  return pwd.split('/')[pwd.split('/').length - 1];
	};

	var getDependencies = function getDependencies() {
	  var args = (0, _minimist2.default)(process.argv.slice(2));
	  var dependencies = [];
	  if (!args.dependencies) {
	    return false;
	  }
	  if (args.dependencies instanceof Array) {
	    dependencies = args.dependencies;
	  } else {
	    dependencies = [args.dependencies];
	  }
	  return dependencies;
	};

	exports.isStringJson = isStringJson;
	exports.readFile = readFile;
	exports.writeFile = writeFile;
	exports.getNodeEnv = getNodeEnv;
	exports.didPassParam = didPassParam;
	exports.getArgs = getArgs;
	exports.isDebug = isDebug;
	exports.getBuildName = getBuildName;
	exports.getDependencies = getDependencies;

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = require("fs");

/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = require("minimist");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _utils = __webpack_require__(10);

	exports.default = function (message) {
	  if ((0, _utils.isDebug)()) {
	    console.log('[METEOR-NOW] - ' + message); // eslint-disable-line no-console
	  }
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _promiseSpawner = __webpack_require__(15);

	var _promiseSpawner2 = _interopRequireDefault(_promiseSpawner);

	var _logger = __webpack_require__(13);

	var _logger2 = _interopRequireDefault(_logger);

	var _utils = __webpack_require__(10);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Command = function () {
	  function Command(command) {
	    var inheritIo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _utils.isDebug)();

	    _classCallCheck(this, Command);

	    this.command = command;
	    var modifiers = {};

	    this.spawner = new _promiseSpawner2.default(modifiers, {
	      stdio: inheritIo ? 'inherit' : 'pipe'
	    });

	    if ((0, _utils.isDebug)()) {
	      this.spawner.out.pipe(process.stdout);
	      this.spawner.err.pipe(process.stderr);
	    }
	  }

	  _createClass(Command, [{
	    key: 'run',
	    value: function run() {
	      var _this = this;

	      (0, _logger2.default)('running command: ' + this.command);
	      return new Promise(function (resolve) {
	        _this.spawner.spawn(_this.command).then(function () {
	          resolve(_this.data);
	        });
	      });
	    }
	  }]);

	  return Command;
	}();

	exports.default = Command;

/***/ },
/* 15 */
/***/ function(module, exports) {

	module.exports = require("promise-spawner");

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.dockerfile = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _fs = __webpack_require__(11);

	var _fs2 = _interopRequireDefault(_fs);

	var _utils = __webpack_require__(10);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var isWin = /^win/.test(process.platform);

	var Dockerfile = function () {
	  function Dockerfile() {
	    _classCallCheck(this, Dockerfile);

	    // Set node to correct version based on meteor version (1.4+ vs 1.3-)
	    var data = _fs2.default.readFileSync('.meteor/release', {
	      encoding: 'utf8'
	    });
	    var version = data.match(/METEOR@(.*)\r?\n/)[1];
	    var microVersion = version.split('.')[1];

	    this.dependencies = (0, _utils.getDependencies)();
	    this.dockerImage = parseInt(microVersion, 10) < 4 ? 'nodesource/jessie:0.10.43' : 'node:boron';

	    this.serverOnly = parseInt(microVersion, 10) < 3 ? '' : '--server-only';

	    // Determine bundle name (it's based on meteor directory)
	    var cwd = process.cwd();
	    if (isWin) {
	      this.builddir = cwd.split('\\')[cwd.split('\\').length - 1];
	    } else {
	      this.builddir = cwd.split('/')[cwd.split('/').length - 1];
	    }
	    this.buildzip = this.builddir + '.tar.gz';
	  }

	  _createClass(Dockerfile, [{
	    key: 'getDependencyInstallScripts',
	    value: function getDependencyInstallScripts() {
	      if (!this.dependencies) {
	        return '';
	      }
	      return this.dependencies.reduce(function (accumulator, currentValue) {
	        return accumulator + 'RUN apt-get install ' + currentValue + '\n';
	      }, '');
	    }
	  }, {
	    key: 'getContents',
	    value: function getContents(includedMongoDB) {
	      var dependencies = this.getDependencyInstallScripts();
	      if (includedMongoDB) {
	        return '\nFROM ' + this.dockerImage + '\n' + dependencies + '\nENV NPM_CONFIG_LOGLEVEL warn\nLABEL name="' + this.builddir + '"\nCOPY . .\nRUN cat *sf-part* > bundle.tar.gz\nRUN tar -xzf bundle.tar.gz\nWORKDIR bundle/programs/server\nRUN npm install\nWORKDIR ../../\nEXPOSE 3000\nCMD ["node", "main.js"]\n    ';
	      }
	      return '\nFROM ' + this.dockerImage + '\n' + dependencies + '\nRUN apt-get update\nRUN apt-get install -y mongodb\nRUN apt-get install -y supervisor\n\nVOLUME ["/data/db"]\n\nENV NPM_CONFIG_LOGLEVEL warn\nLABEL name="' + this.builddir + '"\nCOPY . /usr/src/app/\nWORKDIR /usr/src/app\nRUN cat *sf-part* > bundle.tar.gz\nRUN tar -xzf bundle.tar.gz\nWORKDIR bundle/programs/server\nRUN npm install\nWORKDIR ../../\n\nCOPY supervisord.conf /etc/supervisor/supervisord.conf\n\nEXPOSE 3000\nCMD ["supervisord"]\n';
	    }
	  }, {
	    key: 'getSupervisor',
	    value: function getSupervisor() {
	      // eslint-disable-line class-methods-use-this
	      return '\n[supervisord]\nnodaemon=true\nloglevel=debug\n\n[program:mongo]\ncommand=mongod\n\n[program:node]\ncommand=node "/usr/src/app/bundle/main.js"\n    ';
	    }
	  }]);

	  return Dockerfile;
	}();

	var dockerfile = exports.dockerfile = new Dockerfile();
	exports.default = Dockerfile;

/***/ }
/******/ ])));